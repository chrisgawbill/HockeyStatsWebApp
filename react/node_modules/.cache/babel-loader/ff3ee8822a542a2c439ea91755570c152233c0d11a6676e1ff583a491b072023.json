{"ast":null,"code":"import{StandingsTeam}from\"../Models/StandingsTeam\";export function CreateConferenceStandingsArray(initialStandings){let matchingConferenceName=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";let fixedConferenceStandings=new Array(16);let i=0;let currentSize=0;initialStandings=initialStandings.filter(team=>team.conferenceName===matchingConferenceName);do{const responseTeam=initialStandings[i];if(responseTeam.conferenceName===matchingConferenceName){const name=responseTeam.teamCommonName.default;const conferenceName=responseTeam.conferenceName;const divisionName=responseTeam.divisionName;const wins=responseTeam.wins;const losses=responseTeam.losses;const otLosses=responseTeam.otLosses;const fixedTeamRecord=wins+\"-\"+losses+\"-\"+otLosses;const points=responseTeam.points;const pointsPctg=Math.round(responseTeam.pointPctg*100*100)/100;const leagueStanding=responseTeam.leagueSequence;const conferenceStanding=responseTeam.conferenceSequence;const divisionStanding=responseTeam.divisionSequence;const wildCardRank=responseTeam.wildcardSequence;const standingsTeam=new StandingsTeam(i,name,conferenceName,divisionName,wins,losses,otLosses,fixedTeamRecord,points,pointsPctg,leagueStanding,conferenceStanding,divisionStanding,wildCardRank);fixedConferenceStandings[currentSize]=standingsTeam;currentSize++;}i++;}while(currentSize<16);return fixedConferenceStandings;}","map":{"version":3,"names":["StandingsTeam","CreateConferenceStandingsArray","initialStandings","matchingConferenceName","arguments","length","undefined","fixedConferenceStandings","Array","i","currentSize","filter","team","conferenceName","responseTeam","name","teamCommonName","default","divisionName","wins","losses","otLosses","fixedTeamRecord","points","pointsPctg","Math","round","pointPctg","leagueStanding","leagueSequence","conferenceStanding","conferenceSequence","divisionStanding","divisionSequence","wildCardRank","wildcardSequence","standingsTeam"],"sources":["C:/Users/gawbi/Programming/HockeyStatsWebApp/react/src/Data/Helpers/ConferenceStandingsHelper.ts"],"sourcesContent":["import { StandingsTeam } from \"../Models/StandingsTeam\";\r\n\r\nexport function CreateConferenceStandingsArray(\r\n  initialStandings: any[],\r\n  matchingConferenceName: string = \"\",\r\n) {\r\n  let fixedConferenceStandings:StandingsTeam[] = new Array(16);\r\n  let i = 0;\r\n  let currentSize = 0;\r\n  initialStandings = initialStandings.filter((team) =>  team.conferenceName === matchingConferenceName);\r\n  do{\r\n    const responseTeam = initialStandings[i];\r\n    if (responseTeam.conferenceName === matchingConferenceName) {\r\n      const name = responseTeam.teamCommonName.default;\r\n      const conferenceName = responseTeam.conferenceName;\r\n      const divisionName = responseTeam.divisionName;\r\n      const wins = responseTeam.wins;\r\n      const losses = responseTeam.losses;\r\n      const otLosses = responseTeam.otLosses;\r\n      const fixedTeamRecord =\r\n        wins +\r\n        \"-\" +\r\n        losses +\r\n        \"-\" +\r\n        otLosses;\r\n      const points = responseTeam.points;\r\n      const pointsPctg = Math.round((responseTeam.pointPctg*100)*100)/100;\r\n      const leagueStanding = responseTeam.leagueSequence;\r\n      const conferenceStanding = responseTeam.conferenceSequence;\r\n      const divisionStanding = responseTeam.divisionSequence;\r\n      const wildCardRank = responseTeam.wildcardSequence;\r\n\r\n      const standingsTeam: StandingsTeam = new StandingsTeam(\r\n        i,\r\n        name,\r\n        conferenceName,\r\n        divisionName,\r\n        wins,\r\n        losses,\r\n        otLosses,\r\n        fixedTeamRecord,\r\n        points,\r\n        pointsPctg,\r\n        leagueStanding,\r\n        conferenceStanding,\r\n        divisionStanding,\r\n        wildCardRank\r\n      );\r\n      fixedConferenceStandings[currentSize] = standingsTeam;\r\n      currentSize++;\r\n    }\r\n    i++;\r\n  }while(currentSize < 16);\r\n\r\n  return fixedConferenceStandings;\r\n}"],"mappings":"AAAA,OAASA,aAAa,KAAQ,yBAAyB,CAEvD,MAAO,SAAS,CAAAC,8BAA8BA,CAC5CC,gBAAuB,CAEvB,IADA,CAAAC,sBAA8B,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAEnC,GAAI,CAAAG,wBAAwC,CAAG,GAAI,CAAAC,KAAK,CAAC,EAAE,CAAC,CAC5D,GAAI,CAAAC,CAAC,CAAG,CAAC,CACT,GAAI,CAAAC,WAAW,CAAG,CAAC,CACnBR,gBAAgB,CAAGA,gBAAgB,CAACS,MAAM,CAAEC,IAAI,EAAMA,IAAI,CAACC,cAAc,GAAKV,sBAAsB,CAAC,CACrG,EAAE,CACA,KAAM,CAAAW,YAAY,CAAGZ,gBAAgB,CAACO,CAAC,CAAC,CACxC,GAAIK,YAAY,CAACD,cAAc,GAAKV,sBAAsB,CAAE,CAC1D,KAAM,CAAAY,IAAI,CAAGD,YAAY,CAACE,cAAc,CAACC,OAAO,CAChD,KAAM,CAAAJ,cAAc,CAAGC,YAAY,CAACD,cAAc,CAClD,KAAM,CAAAK,YAAY,CAAGJ,YAAY,CAACI,YAAY,CAC9C,KAAM,CAAAC,IAAI,CAAGL,YAAY,CAACK,IAAI,CAC9B,KAAM,CAAAC,MAAM,CAAGN,YAAY,CAACM,MAAM,CAClC,KAAM,CAAAC,QAAQ,CAAGP,YAAY,CAACO,QAAQ,CACtC,KAAM,CAAAC,eAAe,CACnBH,IAAI,CACJ,GAAG,CACHC,MAAM,CACN,GAAG,CACHC,QAAQ,CACV,KAAM,CAAAE,MAAM,CAAGT,YAAY,CAACS,MAAM,CAClC,KAAM,CAAAC,UAAU,CAAGC,IAAI,CAACC,KAAK,CAAEZ,YAAY,CAACa,SAAS,CAAC,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CACnE,KAAM,CAAAC,cAAc,CAAGd,YAAY,CAACe,cAAc,CAClD,KAAM,CAAAC,kBAAkB,CAAGhB,YAAY,CAACiB,kBAAkB,CAC1D,KAAM,CAAAC,gBAAgB,CAAGlB,YAAY,CAACmB,gBAAgB,CACtD,KAAM,CAAAC,YAAY,CAAGpB,YAAY,CAACqB,gBAAgB,CAElD,KAAM,CAAAC,aAA4B,CAAG,GAAI,CAAApC,aAAa,CACpDS,CAAC,CACDM,IAAI,CACJF,cAAc,CACdK,YAAY,CACZC,IAAI,CACJC,MAAM,CACNC,QAAQ,CACRC,eAAe,CACfC,MAAM,CACNC,UAAU,CACVI,cAAc,CACdE,kBAAkB,CAClBE,gBAAgB,CAChBE,YACF,CAAC,CACD3B,wBAAwB,CAACG,WAAW,CAAC,CAAG0B,aAAa,CACrD1B,WAAW,EAAE,CACf,CACAD,CAAC,EAAE,CACL,CAAC,MAAMC,WAAW,CAAG,EAAE,EAEvB,MAAO,CAAAH,wBAAwB,CACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}