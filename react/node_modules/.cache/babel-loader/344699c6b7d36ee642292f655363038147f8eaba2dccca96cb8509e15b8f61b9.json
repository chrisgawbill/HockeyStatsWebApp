{"ast":null,"code":"import { StandingsTeam } from \"../Models/StandingsTeam\";\nexport function CreateConferenceStandingsArray(initialStandings, matchingConferenceName) {\n  let fixedConferenceStandings = new Array(16);\n  for (let i = 0; i < initialStandings.length; i++) {\n    const responseTeam = initialStandings[i];\n    if (responseTeam.conferenceName === matchingConferenceName) {\n      const name = responseTeam.teamCommonName.default;\n      const conferenceName = responseTeam.conferenceName;\n      const divisionName = responseTeam.divisionName;\n      const wins = responseTeam.wins;\n      const losses = responseTeam.losses;\n      const otLosses = responseTeam.otLosses;\n      const fixedTeamRecord = wins + \"-\" + losses + \"-\" + otLosses;\n      const points = responseTeam.points;\n      const pointsPctg = Math.round(responseTeam.pointPctg * 100 * 100) / 100;\n      const leagueStanding = responseTeam.leagueSequence;\n      const conferenceStanding = responseTeam.conferenceSequence;\n      const divisionStanding = responseTeam.divisionStanding;\n      const standingsTeam = new StandingsTeam(i, name, conferenceName, divisionName, wins, losses, otLosses, fixedTeamRecord, points, pointsPctg, leagueStanding, conferenceStanding, divisionStanding);\n      fixedConferenceStandings[i] = standingsTeam;\n    }\n  }\n  return fixedConferenceStandings;\n}\n_c = CreateConferenceStandingsArray;\nvar _c;\n$RefreshReg$(_c, \"CreateConferenceStandingsArray\");","map":{"version":3,"names":["StandingsTeam","CreateConferenceStandingsArray","initialStandings","matchingConferenceName","fixedConferenceStandings","Array","i","length","responseTeam","conferenceName","name","teamCommonName","default","divisionName","wins","losses","otLosses","fixedTeamRecord","points","pointsPctg","Math","round","pointPctg","leagueStanding","leagueSequence","conferenceStanding","conferenceSequence","divisionStanding","standingsTeam","_c","$RefreshReg$"],"sources":["C:/Users/gawbi/Programming/HockeyStatsWebApp/react/src/Data/Helpers/ConferenceStandingsHelper.ts"],"sourcesContent":["import { StandingsTeam } from \"../Models/StandingsTeam\";\r\n\r\nexport function CreateConferenceStandingsArray(\r\n  initialStandings: any[],\r\n  matchingConferenceName: string\r\n) {\r\n  let fixedConferenceStandings:StandingsTeam[] = new Array(16);\r\n  for (let i = 0; i < initialStandings.length; i++) {\r\n    const responseTeam = initialStandings[i];\r\n    if (responseTeam.conferenceName === matchingConferenceName) {\r\n\r\n      const name = responseTeam.teamCommonName.default;\r\n      const conferenceName = responseTeam.conferenceName;\r\n      const divisionName = responseTeam.divisionName;\r\n      const wins = responseTeam.wins;\r\n      const losses = responseTeam.losses;\r\n      const otLosses = responseTeam.otLosses;\r\n      const fixedTeamRecord =\r\n        wins +\r\n        \"-\" +\r\n        losses +\r\n        \"-\" +\r\n        otLosses;\r\n      const points = responseTeam.points;\r\n      const pointsPctg = Math.round((responseTeam.pointPctg*100)*100)/100;\r\n      const leagueStanding = responseTeam.leagueSequence;\r\n      const conferenceStanding = responseTeam.conferenceSequence;\r\n      const divisionStanding = responseTeam.divisionStanding;\r\n\r\n      const standingsTeam: StandingsTeam = new StandingsTeam(\r\n        i,\r\n        name,\r\n        conferenceName,\r\n        divisionName,\r\n        wins,\r\n        losses,\r\n        otLosses,\r\n        fixedTeamRecord,\r\n        points,\r\n        pointsPctg,\r\n        leagueStanding,\r\n        conferenceStanding,\r\n        divisionStanding,\r\n      );\r\n      fixedConferenceStandings[i] = standingsTeam;\r\n    }\r\n  }\r\n  return fixedConferenceStandings;\r\n}\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,yBAAyB;AAEvD,OAAO,SAASC,8BAA8BA,CAC5CC,gBAAuB,EACvBC,sBAA8B,EAC9B;EACA,IAAIC,wBAAwC,GAAG,IAAIC,KAAK,CAAC,EAAE,CAAC;EAC5D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,gBAAgB,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IAChD,MAAME,YAAY,GAAGN,gBAAgB,CAACI,CAAC,CAAC;IACxC,IAAIE,YAAY,CAACC,cAAc,KAAKN,sBAAsB,EAAE;MAE1D,MAAMO,IAAI,GAAGF,YAAY,CAACG,cAAc,CAACC,OAAO;MAChD,MAAMH,cAAc,GAAGD,YAAY,CAACC,cAAc;MAClD,MAAMI,YAAY,GAAGL,YAAY,CAACK,YAAY;MAC9C,MAAMC,IAAI,GAAGN,YAAY,CAACM,IAAI;MAC9B,MAAMC,MAAM,GAAGP,YAAY,CAACO,MAAM;MAClC,MAAMC,QAAQ,GAAGR,YAAY,CAACQ,QAAQ;MACtC,MAAMC,eAAe,GACnBH,IAAI,GACJ,GAAG,GACHC,MAAM,GACN,GAAG,GACHC,QAAQ;MACV,MAAME,MAAM,GAAGV,YAAY,CAACU,MAAM;MAClC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAAEb,YAAY,CAACc,SAAS,GAAC,GAAG,GAAE,GAAG,CAAC,GAAC,GAAG;MACnE,MAAMC,cAAc,GAAGf,YAAY,CAACgB,cAAc;MAClD,MAAMC,kBAAkB,GAAGjB,YAAY,CAACkB,kBAAkB;MAC1D,MAAMC,gBAAgB,GAAGnB,YAAY,CAACmB,gBAAgB;MAEtD,MAAMC,aAA4B,GAAG,IAAI5B,aAAa,CACpDM,CAAC,EACDI,IAAI,EACJD,cAAc,EACdI,YAAY,EACZC,IAAI,EACJC,MAAM,EACNC,QAAQ,EACRC,eAAe,EACfC,MAAM,EACNC,UAAU,EACVI,cAAc,EACdE,kBAAkB,EAClBE,gBACF,CAAC;MACDvB,wBAAwB,CAACE,CAAC,CAAC,GAAGsB,aAAa;IAC7C;EACF;EACA,OAAOxB,wBAAwB;AACjC;AAACyB,EAAA,GA9Ce5B,8BAA8B;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}